version: 2.1

commands:

  abort_for_docs:
    steps:
      - run:
          name: Avoid tests for docs
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required"
              circleci step halt
            fi

  abort_for_noci:
    steps:
      - run:
          name: Ignore CI for specific branches
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi


  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

#  test-steps:
#    parameters:
#      python_ver:
#        type: string
#        default: "3"
#      redisearch_ver:
#        type: string
#        default: latest
#      coverage:
#        type: boolean
#        default: true
  build_and_test:
    parameters:
      coverage:
        type: boolean
        default: true
    steps:
      - checkout

      - restore_cache: # Download and cache dependencies
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install tox dependencies
          command: |
            pip install --user --quiet -r .circleci/circle_requirements.txt

      - run:
          name: build
          command: |
            poetry build --format sdist
            poetry build --format wheel

      - run:
          name: lint
          command: |
            tox -e linters

      - run:
          name: run tests
          command: |
            <<# parameters.coverage >> COV=1 <</ parameters.coverage >>
            if [[ $COV == 1 ]]; then
              tox -e cover
            else
              tox -e test_without_coverage
            fi

      - save_cache:
          paths:
            - ./.tox
            - ./.cache/pip
          key: v1-dependencies-{{ checksum "pyproject.toml" }}


      - store_artifacts:
          path: test-reports
          destination: test-reports

  docker:
    parameters:
      docker_version:
        type: string
        default: "edge"
    steps:
      - setup_remote_docker
      - run:
          name: dockers
          description: Build and release docker
          command: |
            bash <(curl -fsSL https://get.docker.com)
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            docker build -t redisgraph:<<parameters.docker_version>> .
            docker push

jobs:
  build:
    parameters:
      python_version:
        type: string
      redisearch_version:
        type: string
        default: latest
      coverage:
        type: boolean
        default: true
    docker:
      - image: circleci/python:<<parameters.python_version >>
      - image: redislabs/redisearch:<<parameters.redisearch_version >>
    steps:
      - build_and_test:
          coverage: <<parameters.coverage>>
      - store_artifacts:
          path: test-reports
          destination: test-reports

  # since this is used by cron, we by default build against latest
  build_and_publish:
    parameters:
      python_version:
        type: string
        default: "latest"
      docker_version:
        type: string
        default: "edge"
      coverage:
        type: boolean
        default: true
    docker:
      - image: circleci/python:<< parameters.python_version >>
      - image: redislabs/redisearch:<< parameters.docker_version >>

    steps:
      - build_and_test:
          coverage: << parameters.coverage >>
      - docker

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

on-master: &on-master
  filters:
    branches:
      only: master

# the is to build and test, per commit against all supported python versions
python-versions: &python-versions
  matrix:
    parameters:
      python_version:
        - "3.6.9"
        - "3.7.9"
        - "3.8.9"
        - "3.9.4"
        - "latest"

redisearch-versions: &redisearch-versions
  matrix:
    parameters:
      redisearch_version:
        - "1.6.14"
        - "latest"

workflows:
  version: 2
  commit:
    jobs:
      - build:
         <<: *on-any-branch
         <<: *python-versions
         <<: *redisearch-versions

#      - test:
#          name: build
#          python_ver: "3"
#          redisearch_ver: latest
#          coverage: yes
#          <<: *on-any-branch
#      - test:
#          name: test_py2_latest
#          python_ver: "2.7"
#          redisearch_ver: latest
#          coverage: yes
#          <<: *on-any-branch
#      - test:
#          name: test_py3_search1.6
#          python_ver: "3"
#          redisearch_ver: "1.6.14"
#          coverage: yes
#          <<: *on-any-branch
#      - test:
#          name: test_py2_search1.6
#          python_ver: "2.7"
#          redisearch_ver: "1.6.14"
#          coverage: yes
#          <<: *on-any-branch

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          <<: *on-master
    jobs:
      - build_and_publish:
          coverage: no
#      - test:
#          name: test-nightly
#          python_ver: "3"
#          redisearch_ver: edge
#          coverage: no
